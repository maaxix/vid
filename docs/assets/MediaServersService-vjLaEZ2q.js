var c=Object.defineProperty;var f=(s,e,r)=>e in s?c(s,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[e]=r;var l=(s,e,r)=>f(s,typeof e!="symbol"?e+"":e,r);const i={serverList:[{name:"localhost",url:"https://localhost:4141",apiKey:""}],apiBaseUrl:"",theme:"light"},n="app_config";class g{constructor(){l(this,"config");this.config=this.loadConfig()}loadConfig(){try{const e=localStorage.getItem(n);return e?this.validateConfig(JSON.parse(e)):i}catch(e){return console.error("Failed to load config from localStorage, using defaults",e),i}}validateConfig(e){return!e||typeof e!="object"?i:{serverList:e.serverList||i.serverList,apiBaseUrl:e.apiBaseUrl||i.apiBaseUrl,theme:e.theme||i.theme}}getConfig(){return this.config}save(){try{localStorage.setItem(n,JSON.stringify(this.config))}catch(e){console.error("Failed to save config to localStorage",e)}}saveConfig(e){this.config={...this.config,...e};try{localStorage.setItem(n,JSON.stringify(this.config))}catch(r){console.error("Failed to save config to localStorage",r)}}resetToDefaults(){this.config=i;try{localStorage.removeItem(n)}catch(e){console.error("Failed to reset config",e)}}}const o=new g,u=s=>{try{return new URL(s),!0}catch{return!1}};class v{findServerByName(e){const r=o.getConfig().serverList;for(let t=r.length-1;t>=0;t--)if(r[t].name===e)return r[t];return null}getServersMap(){const e=o.getConfig();if(!(e!=null&&e.serverList))return{};const r={};return e.serverList.forEach(t=>{r[t.name]=t}),r}getServerList(){const e=o.getConfig();return e!=null&&e.serverList?e.serverList:[]}async checkServerStatuses(e){const r={};return await Promise.all(e.map(async t=>{try{const a=await fetch(`${t.url}/api/ping`,{method:"GET"});r[t.name]=a.ok?"online":"offline"}catch{r[t.name]="offline"}})),r}deleteServer(e){const r=o.getConfig().serverList;for(let t=r.length-1;t>=0;t--)if(r[t].name===e){r.splice(t,1),o.save();break}}saveServer(e){const r=o.getConfig().serverList;let t=!0;for(let a=r.length-1;a>=0;a--)if(r[a].name===e.name){t=!1,r[a]={...e};break}t&&r.push(e),o.save()}validateForm(e){const r={_error:"",name:"",url:"",apiKey:""};let t=!0;return e.name.trim()||(r.name="Name is required",t=!1),e.url.trim()?u(e.url)||(r.url="Please enter a valid URL",t=!1):(r.url="URL is required",t=!1),t||(r._error="ERROR"),r}}const m=new v;export{m};
